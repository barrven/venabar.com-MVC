-: Odds are good you've talked about CPUs casually, like,

`"I've got an Intel CPU," or, "I've got an AMD CPU."

In this episode, I wanna answer one simple question

what is a CPU?

Now, I've got a CPU in my hand right here

and what I wanna do is just kinda give you a...

These are just, I'm a CPU collector.

I literally have hundreds and hundreds of CPUs.

So I just thought I'd throw out a few.

Some of these CPUs are close to 30 years old.

Some of these are quite new.

And just give you an idea of what CPUs

physically look like underneath.

They've got little pins or wires.

Sometimes, they've got little pads

and this is the brain of the computer itself.

But I hate the word "brain."

To me, a CPU,

and by the way, it stands for Central Processing Unit.

The CPU is more like

a really, really incredibly powerful calculator.

This calculator can calculate

billions of different calculations per second.

And the secret is, is we have to learn to talk to this guy

in such a way that we can actually make him do things

like make games with things blowing up

and make spreadsheets appear

and make websites do whatever they do.

So in order to understand what a CPU is,

I wanna kind of go with an analogy.

An analogy that I call a man in a box.

What I want you to do is imagine that there is a box.

Inside this box is this dude.

And this guy can add, subtract, multiply, divide

like, incredibly fast

but the problem is he's physically inside the box.

There's no way we can get to this box,

it's made out of 18 feet of concrete or whatever you need

to do to understand that we can't like tap on the box

or anything to talk to this guy.

So what I wanna do, first of all, is come up with a way

for us to communicate with this guy

which I'm gonna call the external data bus.

And it looks something like this.

So here's eight light bulbs.

Now, it's not just eight light bulbs.

In fact, we're gonna make 16 light bulbs

and this is gonna be the wall of the box, okay?

So there's going to be eight light bulbs

that are visible inside the box and eight light bulbs

that are visible outside the box.

In fact, we're gonna put a light switch

underneath each one of these pairs

and we're even gonna put a light switch inside.

Now with this setup, here's what we can do.

If I flip on, say this first switch right here,

it's gonna turn on the light bulb outside the box

and it's also gonna turn on the light bulb inside the box

and through some magic electricity,

it'll even flip the switch up, okay?

And so by flipping one switch, we turn on these two lights

and even flips the switch up.

And let's just say we do this for light number four.

If I flip this up, this light is on,

this light is on and it even flips the switch up.

Now, before we continue this analogy, there's one thing

I'd like to make sure it's okay with you.

Instead of saying on and off for these light bulbs

all the time, would it be okay if I just,

instead of saying on, can I just say the number one?

And instead the light bulb being off,

can I just say the number zero?

Yup, that's binary.

Let's go ahead and continue the analogy

and this time, we're gonna be using ones and zeros.

So if I turn on this first light bulb

and the fourth light bulb,

I have created a pattern of on and off lights

and I've created a set of eight different values.

Each one of these values, by the way,

is called a binary value 'cause it can only be zero or one.

And eight of these across is what we call a byte.

So each one of these is a binary value called a bit

and then eight of them across is a byte.

So eight bits is equal to a byte.

So what I've done here is I've created a pattern.

Remember, 'cause the same lights

are turned on and off inside the box.

So what I've done is assuming that the guy

inside the box knows what these different patterns mean,

I can actually communicate with them.

Sounds good?

Well, I agree.

But what we're gonna have to do first

is we're gonna have to generate a code book

'cause there's a whole bunch of different patterns in there.

And this code book has to say

what does each different pattern

of a and off lights mean of these eight-bit patterns?

So what we're going to do is generate this code book.

So this code book is built into every CPU on Earth.

In fact, it's called the machine language of the CPU.

And people who can write different patterns

of ones and zeros to get the CPU to do different things

are known as programmers.

So let's go ahead and go at that analogy.

Let's keep going a little bit deeper

as we get this CPU running.

So what I'm gonna do is I'm gonna hand this guy a code book.

Now he's got the code book.

But before we close the lid on this guy,

there's one more thing I wanna do.

What I'm gonna do is I'm gonna put in

four racks of light bulbs.

And each one of these racks of light bulbs

are gonna have 16 light bulbs on them.

So we have 16 light bulbs.

The function of these light bulbs

are going to be storage areas for the guy inside the box

to be able to do adding, subtracting, multiplying, dividing.

And by the way, we call these registers, okay?

And for just this particular example, let's label them.

We're gonna call this one the AX register,

this one the BX register, this one the CX register

and this one is the DX register.

Every CPU on earth has registers like these.

In fact, in this particular example,

I'm only showing you four different registers,

which are known generically as general purpose registers,

which means that the guy in the box can use them

for anything he wants.

On a more modern CPU, you might find 100 different registers

that could be as much as 128 bits across.

So we're keeping it simple for you to understand

how all this works.

Now that we understand that the guy has a code book

and these registers, what I wanna do right now

is pop up an example code book.

Now, the code book I'm about to show you is not real, okay?

It's based on one of the oldest CPUs out there that was used

on the first PCs called the Intel 8088 Processor.

So while I'm having a little bit of creative license

in terms of exactly how this works, conceptually,

this is exactly how they work.

So let's take a look at this example code book.

So if we take a look on this code book, it's going to say

this first pattern says,

"I'm going to put a number up next,

put that in the AX register."

Now here's a command that says,

"I'm going to put a number in next,

put that in the BX register."

And here's another command that says,

"Add together what's ever

in the AX and the BX register together

and put the result in the AX register."

And then last is, "Whatever's on the AX register,

put it out on the external data bus so I can see it."

So in essence, what we're gonna do right now

is we're gonna add two plus three,

and that's really all it boils down to.

Now, before we close the lid on this guy,

I'm gonna throw one more thing on there.

And what we're gonna do is we're gonna put

like a bell inside.

You ever gone into a store

and you open the door and you hear (imitates bells ringing).

So this is a kind of like a bell

we're gonna put inside the CPU, which we call the clock.

Now the clock's job is to tell the CPU to do something.

So with the code book, the four registers and the clock,

we're now going to add two plus three.

You guys ready?

Woo-hoo, here we go.

Okay, now the first thing I'm going to do is I'm gonna put

in the code in binary that says,

"I'm about to give you a number,

whatever the number is next, put it on the ax register."

So we're gonna flip the wires to get that pattern

based on the code book.

Got it?

Now the next thing we're gonna do

is we're going to actually ring the bell.

So really, what we should do is put

like a doorbell on the side and that's going to tell the CPU

that he needs to do his thing.

So let's make that clock look like a little doorbell.

It's actually just a wire.

So we go and put that in and we press the button.

Now the CPU is going to see that

and what he's gonna do is he's going to read that

and he's gonna be ready.

So now what I'm gonna do, oh, and by the way

when he does this so that we know that he's ready

for the next command, he'll zero all this out.

We're not touching anything,

we're just hitting that clock wire.

Then all of a sudden, it goes to zeros.

That's telling us the CPU is ready for the next command.

So the next command is we're going to put,

we're gonna have two plus three.

So we're gonna do the number two in binary.

So on this part you're gonna have to do

a little bit of a trust me.

So that's zero, that's one, that's two.

So now what we're gonna do is take this value, light up

the proper wires and we hit that clock button.

Now the thing you gotta be careful here

is CPUs aren't like human beings.

A lot of times, we're gonna hit to hit that clock button

a few times for it to go ahead and zero everything out.

So there's not a perfect one-to-one correlation

of, every time I press the doorbell, something happens.

It depends on how complicated the command is.

In today's modern processors,

there are very, very complicated commands

that would require me

to hit that CPU clock about, I don't know, 100 or 200 times

before the CPU actually processes it.

So keep that in mind as we move forward.

All right, let's keep going.

So let's refer to the code book again.

And the next command is we gotta flip these different wires

on and off to put the number three into the BX register.

So let's go ahead and get that ready.

Press that clock button until it zeros out.

That means the CPU's ready for the next value.

So let's go ahead and do three in binary.

So we'll punch that in, let's hit the clock wire.

And now all of a sudden, it zeroes out

and we can't see this but right now, a binary value

for the number two is in the AX register

and a binary value

for the number three is in the BX register.

So let's add them up.

So let's refer to the code book.

Here's a pattern of wires that says,

"Add what's ever in the AX register to the BX register

and put the result on the AX register."

So yes, it's gonna wipe

out whatever's in the AX register, that happens.

So we put that pattern in,

we hit the clock wire a few times, boom.

It has zeroed out

which now means we can't see it

'cause we can't see inside the box,

but now the value for a binary five

is now in the AX register.

So here's another command

on the code book that says, "Whatever is in the AX register,

put it on the external data bus so we can see it."

So let's go ahead and put that pattern in.

And we hit the clock wire and hit the clock wire.

Except this time, it doesn't zero out.

This time, it now shows us a binary five

on the external data bus.

So congratulations, you've just added two plus three

on a CPU using machine language.

So this is really all that the programmer is.

A programmer is a person who can use machine language

to talk to a CPU to get work done.

In this case, we're just adding two plus three

but we can do a lot more with more modern CPUs.

So that sounds great

but I'm gonna make it a little bit more complicated

or actually more realistic.

What we're going to be doing now

is that it's really not a single entity inside the CPU.

Inside the CPU, you have lots of what we call logic units

that are actually doing the math.

And some are really good at integer math

and some are really good at moving data around.

So you have all these different functions inside A CPU.

Now, have you ever done your laundry?

Now if you do your laundry, do you sit there and go,

so I take all my laundry and I go through

this big pile of laundry, I pull out all my towels.

And then I throw my towels in the washer and then I dry them

and then I fold them and then I grab another load

and then I put, no, you don't do that, do you?

What you do is you get one load running

and as soon as you get that out of the washer,

then you go ahead and put that in the dryer.

And then while it's drying, you get another load.

So you have lots of stuff running simultaneously.

In the CPU world, we call this a pipeline.

So let's take a look at a pipeline.

Except this time, we won't have a man in a box.

We're gonna have a bunch of guys in the box.

Let me show you how this works.

So on the simplest CPU, we're gonna have four guys.

And these four guys are in front of a conveyor belt.

So each time a command comes in from the external data bus,

the first guy here, his job is to look at it

and decide which one of these guys to give it to.

Because this guy right here,

he's really good at integer math.

This guy right here, he's really good at really,

we'll just call it long numbers

to make it easier for right now.

And this guy right here,

he's really good at holding on to information

or to send that information onto other places.

It could be registers or it could be outside

of the CPU into this stuff called RAM.

So I'm just going to call him the cache guy.

We'll talk about caching in other episodes.

So this guy who we call the prefetch,

he looks at that command and he's gonna look

at that command to decide to do with it.

So on the next click of the clock, he might send it

to the integer guy, whereas another command's

already come in to handle it for him.

So he might, on the next click of the clock, send it

over to the long integer guy, the guy in the integer,

he's already done with it 'cause he is already added it.

So he moves it over to the cache guy.

So what happens is all these different commands

are moving along in what we call a pipeline

or also known as a core.

Now in my simple example here, the pipeline

only has four different discrete steps.

On modern CPUs that can be 16 steps,

even in some cases, up to 30 different steps depending

on the make and model of CPU that you buy.

The important thing is, is that we don't care necessarily

what happens on the inside.

We know that if we write using the proper machine language,

as long as they can process that machine language

on the inside, whether they have four steps, 16 steps,

or 30 steps in their pipeline,

it doesn't make any difference to us.

It does make a big difference to companies

like Intel and AMD as they build their internal architecture

for CPUs because they always wanna make the best one.

So when we're really talking about CPUs,

the one big thing we can do right now to speed things up

is to be able to hit the clock faster.

So making your clock faster and faster can be good

but only up to a certain point.

And keep watching some more of these episodes here

and we're gonna make this CPU a lot more sophisticated

and a lot faster too.