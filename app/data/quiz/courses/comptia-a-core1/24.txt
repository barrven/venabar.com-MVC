-: This, my friends, is a typical motherboard. Now, as we look at a motherboard, from other episodes we know things like, for example, this is where we snap in our RAM, and this is where we snap on our CPU. We also know from other episodes that this is the interface by which everybody talks to everybody else on your computer. Except, I'm gonna take it even further than that, I'm gonna tell you that a motherboard is an assumption, it's an assumption in that it assumes that you're gonna be putting USB devices on here, in fact, they even solder USB connectors on there. It assumes that you're gonna wanna use wireless, so it has wireless ready to go. It assumes that you're gonna wanna plug in speakers and maybe headphones. It assumes network connections. But it assumes more than that, it assumes there's hard drive connections on here, there are all kinds of little different types of connections for all kinds of little stuff, well, this has an outrageously large number of USB connections. The bottom line is that a motherboard is an assumption that you are going to use certain types of hardware. Now, if you think about this, this is a fairly safe assumption. For example, odds are pretty good you're gonna use a keyboard, odds are pretty good you're gonna use a mouse, odds are pretty good you're gonna use some kind of mass storage, odds are good you're gonna be using this stuff. Now, that's great, and the motherboard acts as the interconnectivity for these types of devices, but there are situations where your computer needs to talk to these devices, not within Windows, but even before the operating system itself boots up. Now, we know that operating systems, one of the things they provide, are device drivers. So if I'm using Linux, I have Linux drivers for the hard drive in here, I have Linux drivers for the USB. However, there's lots of situations where, before the system even boots into an operating system, that we need to be able to speak to these devices. In fact, in many cases, the operating systems themselves will forego device drivers and simply use some built-in language that allows them to talk to all this stuff, these are known as our basic input/output services, better known as BIOS. And that's right, folks, built into this motherboard somewhere, is programming. Now, we use the term firmware because firmware means that it's burned onto a chip, as opposed to software, which means that it's copied onto some kind of magnetic media or electronic media. So, on every motherboard in existence, there is no exception to this, there is a little bit of programming, built into the motherboard, that's designed to let you talk to the assumed hardware of the computer, and it's called BIOS, you wanna see it? I'll show you one right here. This motherboard dates from the mid 1990s, and I like it because it's got really big parts, and this entire chip right here is a BIOS chip. BIOS chips grow on BIOS trees, (laughs) no they don't, BIOS trees are code, and they have to be written by programmers. And there are companies out there that write BIOS's, they have names like AMI, American Megatrends, Phoenix, and there are organizations out there that sell them to any motherboard manufacturer who's got the cash, so that's where these names come from. So this is a very old BIOS, let me show you what BIOS looks like on a modern system. So, if we take a look at here we've got these two little, teeny tiny chips, and right next to it, I don't think the camera can get this, it says M_BIOS and B_BIOS. What you're looking at is a feature that's common to many motherboards today, where they make two copies of this critical, critical firmware. If by any chance we were to accidentally wipe it out or corrupt it, we've got a backup copy on a completely separate chip. In fact, this motherboard comes from a company called Gigabyte who is famous for doing exactly that. Now the problem with BIOS, is that there's really no way to show it to you, I can't open a hatch up on a computer and go, ah, here's the actual code itself, can't do that. But what I can do is talk about BIOS a little bit more to make sure we understand what all it can do. Now, for example, on this BIOS, you have the ability to talk to the mass storage devices of your motherboard. So if you snap in an SSD, or if you snap in an old-school hard drive, you can talk to that drive without even booting into Windows. This is done, more than any other reason, to test it, as the computer boots up, we go through a process of checking out the assumed hardware. It's not worth anybody's time for you to try to start Linux if the hard drive isn't talking right. There's no reason to try to boot up a Windows screen if you don't have a monitor that can at least output something. So, built into our BIOS is also something known as the Power-On Self-Test, or POST, we got a whole episode on POST coming up. The third thing that's built into that chip is something called the System Setup. That same hard drive, it's gonna change, it depends what your capacity is of the drive, and things like that. So, some of that code has to be able to read a little data, and that's what we call the System Setup and, also known as the Complementary Metal Oxide Semiconductor, or CMOS, and I've got another episode on that as well. So, when we talk about BIOS, what we're talking about is a little tiny chip on the motherboard that talks to the assumed hardware of the system. I'm gonna save it for a few more episodes to show you some of the other denizens of that little chip.