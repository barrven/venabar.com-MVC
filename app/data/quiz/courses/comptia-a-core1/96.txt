-: There are a few things

that have rocked the IT world more than virtualization.

In this episode, I wanna kind of get you

through the concept of virtualization

and show you how powerful

and how amazing of a tool it is.

So let's get started by taking a look at my screen.

Hey, look, I'm on Linux right now.

I'm running new Ubuntu Linux, right?

Well, watch this.

What's really happening, friends,

is I'm really on a Windows 10 system.

What you're looking at right here

is a virtual machine inside this computer,

and it is actually a virtual computer.

It has, as far as it's considered,

its own CPU it's own RAM, it's own hard drive,

it's own USB ports, it's own optical media,

it's own microphone and sound card if you want.

All of this is built into this little device

which is being hosted on top of Windows.

This is not a remote access,

this is physically all right here on this computer.

This my friends, is a virtual machine.

A virtual machine is a completely self-contained computer

that is running within a host operating system,

well, at least in this case.

When we're talking about virtualization,

now, first of all, I wanna make sure we're very comfortable

with the concept of virtualization versus emulation.

Virtualization means I'm going to take

some of the real physical hardware you have

and allocate some of this to a separate internal system.

This system will use a little bit of your CPU,

a little bit of your RAM,

a little bit of your hard drive.

You can configure this stuff

but it cannot do anything that you don't already have.

For example, on this particular computer,

I couldn't run a Nintendo 64 virtual machine.

That's emulation, emulation is when you pretend

to have hardware that you don't have.

Nintendo 64 does not run on an Intel-type platform.

So, if I wanted to do something like that,

then I would have to have a emulator.

So we're not emulating, we are virtualizing.

Now, in order for virtualization to work,

first of all, you need to have a CPU

that supports virtualization.

Now, pretty much all of them do these days,

but you may have to go into your system setup

and make sure that it's turned on.

So let me show you a screen snap

from my system setup

to show you one particular example

of where you have to turn it on.

So if you take a look right here,

that little setting right there basically,

Enable or Disable, and I wanna make sure

that that's turned on before I start doing

any of this groovy virtualization stuff.

Okay, so you've got it turned on.

So, how do you start doing virtualization?

Well, the first thing you're gonna need is a hypervisor.

A hypervisor is the actual host

that runs the virtual machines.

There are two kinds of hypervisors out there.

Let me describe both of those to you.

Here's all the hardware of my computer.

This is my hard drives, my CPU,

this is the actual real hardware of my computer.

A type-1 hypervisor, you install it

just like any other operating system onto that system.

So, a type-1 has nothing between it

and the actual hardware itself.

We then begin to create virtual machines

that run on top of that hypervisor itself.

A type-2 hypervisor,

it's going to have some kind of operating system

that's already installed.

So this could be Windows, this could be Linux,

this could be Mac, doesn't matter,

we already have an operating system running.

And then we install the hypervisor

which installs like any application,

we don't install it like an operating system.

And then we run the virtual machines on top of that.

So, what I have right here in front of me

is a very, very popular type of type-2 hypervisor

called Oracle VM VirtualBox.

So this is the hypervisor part.

You can see I have one, two, three,

four, five different virtual machines up and cooking,

and I actually have one running right now,

and that is my Ubuntu, which is running right here.

If I want to fire up another one,

let's say this Windows 10,

I go ahead and start it,

and it's go ahead and allocating resources

from my physical real computer,

and it's booting this guy up.

What's really important here

is that the virtual machine itself doesn't see

the actual host operating system.

The hypervisor is between IT and the host OS,

and as far as it's concerned,

that's all there is in the world.

Now, this is actually pretty cool

that it's up and running like this.

It's designed to work within the host operating system

because VirtualBox is designed

to be one of the best type-2 hypervisors out there

and I can create lots and lots of these virtual machines

and everything will run absolutely beautifully.

The cool part to a virtual machine

is that you can turn it off,

and when you turn off a virtual machine,

it just turns into a file.

The entire virtual hard drive

just turns into a file that sits on your regular hard drive

and you can fire it up anytime you want.

This brings up some real benefits.

Number one, a lot of computers are never utilized

at their full capability.

And back in the old days,

if you wanted to host a website,

you had to fire up a computer

and then you had to go and put a web server on it

and all that.

Today, what we can do

is we can set up 50, 100 different websites

on one albeit powerful computer,

and then that way we save on costs of hardware,

we save on power costs,

you save a lot of power

because you've only got one machine doing the job

of a bunch of machines.

The other nice thing we have is security.

If somebody were to hack our website, for example,

because it's running on a virtual machine,

all we have to do is turn it off

and get a backup copy of our file

which is the entire thing,

and just start it right back up again.

So, in terms of security and recovery,

virtual machines are absolutely incredible.

VMs are so powerful today that you are not going to run

into a situation where you go to a website

that's on actual hardware anymore.

All websites today are VMs.

I'm sure there's three left out there,

but I don't know about them.

So, type-2 hypervisors are fantastic

for individual systems.

I use 'em all the time,

for example, I want to test a Windows update

or I wanna try a new version of Ubuntu,

those are absolutely fantastic.

But, by putting the operating system

between the hypervisor and the hardware,

we don't get a lot of efficiencies.

So most of the time

when we're talking about robust, serious hypervisors,

we're talking about a type-1 hypervisor.

A type-1 hypervisor

is in and of itself an operating system.

However, it only has one job,

and that is to support and run virtual machines.

There's a lot of names for these guys.

VMware, for example, is a company

that pretty much invented all this,

and VMware has a number of very powerful type-1 hypervisors,

ESXi would be one,

Microsoft's Hyper-V is another one that's absolutely great.

I'm not going to try to sell you on one,

there's an open source one called KVM.

Unfortunately, if you just look at a type-1 hypervisor,

they tend to be really boring.

I mean, there's nothing for us to do, actually,

at the individual machines.

However, with most of these type-1 hypervisors,

you have some type of client utility

that is run on individual computers

where you can pull virtual machines off of that guy

and do what you wanna do.

So, type-1 hypervisors do most of the heavy lifting.

But if you want to understand virtualization,

we're gonna stick with the type-2 hypervisor,

and VirtualBox from Oracle is just wonderful,

and did I mention, it's also completely free.

Okay, so on this particular virtual machine,

one of the first things I wanna do is in the VM itself,

let's do an ipconfig.

So, his IP address is 10.0.2.4, got that idea?

Now on the host machine, I do an ipconfig,

And you see his IPv4 address is 192.168.4.88.

Now, that means

they're on totally different networks, right?

So here's the big question.

Can I get on the internet with this thing?

The answer is yes, I can.

This is one of the real powers of virtual machines.

We can create virtual networks.

I have a virtual network card built into this system.

I can create virtual switches

where I can make four computers

and connect just those four computers together

in their own little network.

I can do things like I can make a virtual router

and that router can do NAT,

and I can set up a virtual router, you ready,

virtual router with NAT

and then those four computers

can all be connected to the internet,

and it's all NAT,

and it's all pretty much auto magic.

So, there's incredible power,

incredible flexibility, incredible security,

incredible recovery, amazing power savings,

all because of virtualization.

Now what we have to do

is let's set one of them up for ourselves.

I'm gonna save that for the next episode.