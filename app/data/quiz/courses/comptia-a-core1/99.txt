-: Virtualization on my local machines is absolutely fantastic, but I've got an idea for you. What if we took a computer that's full of virtual machines and put it up into a big server farm somewhere in Colorado and then gave people remote access to their virtual machines? That's what we call the cloud. Arguably, the cloud means anytime I don't know physically where a computer's located, but I can access it by its IP address is a cloud function. So I would personally argue that every time you open up a web browser and go to Google, you are doing a cloud function. 'cause there is a web server somewhere out in the universe. You don't know where it is, but it's working for you. But when we're talking about cloud in this context, what we're talking about are virtual machines that you have some degree of control of. You don't know physically where they're at, you don't even care, but you can manipulate them. You can administer them using remote tools. You have its IP address, you control its URL, that type of thing. If we do that, we get some incredible benefits. For example, we will have what we call rapid elasticity. So Mike Meyers comes up with a better mouse track and he goes, www.mikesnewcoolmousetrap.com and people start going to this website and they start liking it, and all of a sudden, well, I've got a whole bunch of people in Japan who are really, really into this site. What I can do is I can take a copy of this virtual machine that's running somewhere in Colorado and move a identical copy over into the Asian market. So that way, and I can do this with a few clicks of the button, so suddenly I can double, triple, quadruple my ability to deal with incoming demand just by clicking. It's absolutely powerful in the way that works. The other thing, and this is similar to elasticity but a little bit different, is what we call on demand. There's a lot of things out there that are seasonal. So the National Football League around Super Bowl time gets a real big peak in their traffic. So what they can do is they can suddenly take one virtualized machine and clone it a bazillion times while the Super Bowl is running, and then after the season they can then shrink it back down to keep the demand. This allows people incredible opportunities. Back in the old days before virtualization, before the cloud, you'd have to go out there and physically put a bunch of new computers into your server racks out in your big server farms, and then the moment you were done with them, you had sitting around with all this hardware. So to be able to take advantage of something like this is very, very powerful. Then the other big issue you have is resource pooling. Now all of a sudden you've got this big bazillions of virtual machines running somewhere in Colorado. You can have them share storage, for example. You can have them share electrical needs. You can have them share HVAC so the heating and cooling is all pooled within this one big building and it allows incredible efficiencies. This type of virtualization where we're doing it in the cloud has become the dominant way that we do almost anything on the web. Big companies with names like Amazon Web Services control huge percentages of all of the servers out there, in particular web servers that are pushing out everything from Dropbox to Office 365 to you name it, it's gonna be sitting on a virtualized server somewhere up in the cloud. So clouds are absolutely critical, but they can do a lot of things as a service that traditionally we would go out and buy. For example, one of the big things that would give us is infrastructure as a service. So back in the old days, if I wanted to set up a website I had to go buy a big server box and I had to get everything set up, connect to the internet. Now with companies like Amazon Web Services we can do things where we can just log onto the Amazon Web Services site and we can create our own virtual machines. Now, Amazon calls these virtual private clouds. That's their terminology. But we can go ahead and set up a machine. We can define how many CPUs, how much RAM, how much storage space. We can decide what type of operating system we wanna install on it. Then we can get it up and spinning. We can install our web server software, we can install anti malware. You can put anything on there. You can set up network controllers in the cloud so you can set up firewall systems that are virtualized that will protect your big websites. It's absolutely incredible. And the most important thing, and this is the big one, is that this stuff costs pennies on the dollar from what it used to be. My company has some pretty big websites out there and we're paying just a little bit over a hundred dollars a month for something where back in the old days, just to have one tech to support all this would've been many thousands of dollars a month. So it really has an amazing efficiency and something we see all over the place. You would be hard pressed to find a website out there today that isn't in the cloud, because it just makes sense. Oh, and by the way, Amazon has backups upon backups. They literally will have an entire server farm and then they will have another server farm a few miles away that stores the exact same information. So the whole idea of recovering from a disaster with things like Amazon Web Services become trivialities because they not only back up their systems, they back up the buildings that are storing the systems. So that's infrastructure as a service. Now, if you think that's cool, we can take it up another click to something called platform as a service. With platform as a service, you literally don't even know that you have virtual computers out there. Platform as a service is a really great place if you're a programmer because I've got a programmer who's trying to come up with a new web app. So when you go to this site you play some game or whatever it is. So I'm always writing the code and I wanna know if this code is going to run in a web browser. So what I'll do is I can use companies, like for example, Heroku, which is a very popular platform, as a service, and in these I just write code and then I say I would like to run this code, and it will literally, at the press of a button, take that code, it will build an infrastructure as a service. You don't even see this happening, and it takes the code, loads it into a system, puts a web server on there, runs it and hands you a public URL that you can then go open up your own web browser and check it out. It's absolutely amazing. Platform as a service is also infrastructure as a service although it's completely invisible to us. You literally just write code and make it go. How scary is that? The next level up is going to be software as a service and we've all seen this a thousand times. Anytime you've gone to any website that does anything, Google Docs for example, would be a great example. Google Maps would be another one. These websites are actually applications and what there really are is software that you run as a service to do stuff. Now, software as a service could almost be arguably any website. To me, Google, just good old Google itself, technically as a search engine, is also software that searches for you as a service, as a free service. So even Google would count as well. So really, when it boils down to it, for the exam, make sure you're comfortable with the concept of infrastructure as a service, platform as a service, and software as a service.